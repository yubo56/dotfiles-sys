#!/usr/bin/zsh

sep='|'
refresh_interval=5

DP1_val='disconnected'
HDMI1_val='disconnected'
DOUBLE_val='disconnected'

while true; do
    #--------------------------------------------------------TOGGLE SCREEN WHEN CONNECTED----------------------------------------

    # different machines have different names

    # check for existence of various inputs to check whether macbook has
    # discrete card / display ports are enabled
    if [[ "$(hostname)" =~ BlendArch ]] && [[ -a /sys/class/drm/card0-HDMI-A-1 ]]; then
        # special case, two monitors
        if [[ $(cat /sys/class/drm/card0-DP-1/status) == 'connected' ]] && [[ $(cat /sys/class/drm/card0-HDMI-A-1/status) == 'connected' ]]; then
            if [[ $DOUBLE_val =~ 'disconnected' ]]; then
                DOUBLE_val='connected'
                DP1_val='disconnected'
                HDMI1_val='disconnected'
                echo "Changing because new DOUBLE_val $DOUBLE_val"
                xrandr\
                    --output HDMI-1 --auto\
                    --output DP-1 --auto --rotate left --right-of HDMI-1\
                    --output eDP-1 --auto --right-of DP-1 --mode 1920x1200
                dwm_rebg
            fi
        else
            DOUBLE_val='disconnected'
            # if status changed
            if [[ $(cat /sys/class/drm/card0-DP-1/status) != $DP1_val ]]; then
                # update status, xrandr auto
                read DP1_val < /sys/class/drm/card0-DP-1/status
                echo "Changing because new DP1_val $DP1_val"
                xrandr --output DP-1 --auto --rotate left --left-of eDP-1\
                    --output HDMI-1 --off
                dwm_rebg
            else if [[ $(cat /sys/class/drm/card0-HDMI-A-1/status) != $HDMI1_val ]]; then
                read HDMI1_val < /sys/class/drm/card0-HDMI-A-1/status
                echo "Changing because new HDMI1_val $HDMI1_val"
                xrandr --output HDMI-1 --auto --left-of eDP-1\
                    --output DP-1 --off
                dwm_rebg
            else if [[ $HDMI1_val == 'disconnected' ]] && [[ $DP1_val == 'disconnected' ]]; then
                xrandr --output DP-1 --off --output HDMI-1 --off
                dwm_rebg
            fi; fi; fi
        fi
    else if [[ "$(hostname)" == ArchTest ]]; then
        xrandr --output HDMI1 --auto --left-of eDP1
    else if [[ "$(hostname)" =~ exo15c ]]; then
        xrandr --output HDMI-1 --auto --left-of VGA-1 --output VGA-1 --auto --rotate left
    else if [[ "$(hostname)" == YuboDesktop ]]; then
        xrandr --output HDMI-1 --auto --right-of DP-1 --rotate left
    fi; fi; fi; fi

    #--------------------------------------------------------CALCULATE CPU USAGE----------------------------------------
    cpustat=`cat /proc/stat | head -n 1`
    prevused=${prevused:-0}
    previdle=${previdle:-0}
    used=${used:-0}
    idle=${idle:-0}
    read _name user nice system incidle _y <<< $cpustat

    (( used = $user + $nice + $system ))
    (( idle = $incidle ))

    bccmd="scale=1;\
        100 * \
            ($used - $prevused) /\
            (($used - $prevused) + ($idle - $previdle))"
    usage=$(bc <<< $bccmd)
    prevused=$used
    previdle=$idle

    #-------------------------------------------------------MEMSTATS--------------------------------------------
    total=$(cat /proc/meminfo | grep MemTotal | sed -e 's/MemTotal://g' -e 's/kB//g' -e 's/ //g')
    free=$(cat /proc/meminfo | grep MemFree | sed -e 's/MemFree://g' -e's/kB//g' -e 's/ //g')
    mem=$(echo "scale=0;($total - $free)*100/$total" | 'bc')

    #-------------------------------------------------------BATTSTATS--------------------------------------------
    battstat="N/A"
    _battdir=/sys/class/power_supply/BAT0
    batttime=''
    if [[ -e $_battdir/status ]]; then
        read _battstat < $_battdir/status
        battstat=${_battstat:0:1}
        battperc=$(bc <<< "scale=1;100*$(cat $_battdir/charge_now)/$(cat $_battdir/charge_full)")
        batthealth=$(bc <<< "scale=1;100*$(cat $_battdir/charge_full)/$(cat $_battdir/charge_full_design)")
        # assume actually on battery power if discharging & battperc < 95
        # (sensor sometimes declares discharging when nearly full)
        if [[ $battstat = 'D' ]] && (( $battperc < 95 )); then
            batttime="($(acpi -b | awk '{print $5}'))${sep}"
        fi
        battAll="B:$battperc$battstat($batthealth)$temp${sep}"
    fi


    #-------------------------------------------------------VOLUME--------------------------------------------
    vol=$(amixer get Master | grep 'Front Left:' | perl -e "my \$string = <>;print \"Mu\" if \$string =~ /off/;\$string =~ s/\[(\d+)%\]// if \$string =~ /\[on\]/;print \$1;")
    vol2=$(amixer get Master | grep 'Mono:' | perl -e "my \$string = <>;print \"Mu\" if \$string =~ /off/;\$string =~ s/\[(\d+)%\]// if \$string =~ /\[on\]/;print \$1;")

    #------------------------------------------------------BRIGHTNESS------------------------------------------
    if [[ -f $brightfile ]]; then
        bright="D:$(echo "scale=0;$(cat $brightfile) * 100 / $(cat $brightmax)" | bc)${sep}"
    fi


    #-------------------------------------------------------SET INTERNET RELATED STUFF--------------------------------------------

    #format weather string
    if [[ -s /tmp/weather ]]; then
        weather="$(cat /tmp/weather)${sep}"
    else
        weather=""
    fi

    #---------------------------------------------------------- TEMPERATURE ----------------------------------------------------------
    if [[ -a /sys/devices/platform/coretemp.0 ]]; then
        read temp < /sys/devices/platform/coretemp.0/hwmon/hwmon*/temp1_input
        temp="${sep}T:${temp:0:-3}"
    else temp=""
    fi

    #---------------------------------------------------------- SIGNAL STRENGTH QUALITY/LEVEL -----------------------------------------
    if ! [[ $(iw dev $WIFI link) == 'Not connected.' ]]; then
        net="W:$(iw dev $WIFI link | grep signal | awk '{print $2}' | sed 's/\ //g')${sep}"
    fi

    #-------------------------------------------------------SET REPLY--------------------------------------------
    REPLY="${bright}${battAll}${net}V:$vol$vol2${sep}C:$usage${sep}M:$mem${sep}${weather}${batttime}I:$(hostname -i)"

    if [[ "$(hostname)" =~ BlendArch ]]; then
        read fan_in < /sys/devices/platform/applesmc.768/fan1_output
        read fan_min < /sys/devices/platform/applesmc.768/fan1_min
        read fan_max < /sys/devices/platform/applesmc.768/fan1_max
        FAN=$(echo "scale=0;($fan_in - $fan_min)*100/($fan_max - $fan_min)" | 'bc')
        REPLY="F:${FAN}|${REPLY}"
    fi

    echo "$REPLY" > /tmp/status
    sleep $refresh_interval
done
