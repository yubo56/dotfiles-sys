#!/usr/bin/env python
'''
It's nice sometimes to be able to ask WolframAlpha

"G * (1 solar mass)**2 / (1AU)"

Sometimes it fails to parse, and it requires being online, and is slow. I want
to write a quick script to evaluate such expressions, maybe with some support
for "!!" (previous result) and "!-N" (N results ago) syntaxes.

NB: use "m\s" in input expressions for units of "meters per second", hack

TODO:
- mode to read previous results
'''
import sys
import os
import numpy as np
# Macos Python 3.11 broke readline for me...
try:
    import gnureadline as readline
except ImportError:
    import readline

# map of supported units -> (val, (units))
ONE_AU = 1.496e11
UNITLESS = [0, 0, 0, 0]
UNITS_DICT = {
    'kg': (1, [1, 0, 0, 0]),
    'm': (1, [0, 1, 0, 0]),
    's': (1, [0, 0, 1, 0]),

    'g': (1e-3, [1, 0, 0, 0]),
    'km': (1e3, [0, 1, 0, 0]),
    'cm': (1e-2, [0, 1, 0, 0]),
    'mm': (1e-3, [0, 1, 0, 0]),

    'Msun': (1.989e30, [1, 0, 0, 0]),
    'Rsun': (6.955e8, [0, 1, 0, 0]),
    'Mmercury': (3.3011e23, [1, 0, 0, 0]),
    'Rmercury': (2.439e6, [0, 1, 0, 0]),
    'amercury': (0.387 * ONE_AU, [0, 1, 0, 0]),
    'Mvenus': (4.867e24, [1, 0, 0, 0]),
    'Rvenus': (6.052e6, [0, 1, 0, 0]),
    'avenus': (0.723 * ONE_AU, [0, 1, 0, 0]),
    'Mearth': (5.972e24, [1, 0, 0, 0]),
    'Rearth': (6.371e6, [0, 1, 0, 0]),
    'AU': (ONE_AU, [0, 1, 0, 0]),
    'Mmoon': (7.3477e22, [1, 0, 0, 0]),
    'amoon': (384399e3, [0, 1, 0, 0]),
    'Rmoon': (1737e3, [0, 1, 0, 0]),
    'Mmars': (6.41e23, [1, 0, 0, 0]),
    'Rmars': (3.389e6, [0, 1, 0, 0]),
    'amars': (1.524 * ONE_AU, [0, 1, 0, 0]),
    'Mjup': (1.898e27, [1, 0, 0, 0]),
    'Rjup': (6.991e7, [0, 1, 0, 0]),
    'ajup': (5.202 * ONE_AU, [0, 1, 0, 0]),
    'Msat': (5.683e26, [1, 0, 0, 0]),
    'Rsat': (5.823e7, [0, 1 ,0, 0]),
    'asat': (9.537 * ONE_AU, [0, 1, 0, 0]),
    'Muranus': (8.681e25, [1, 0, 0, 0]),
    'Ruranus': (2.537e7, [0, 1, 0, 0]),
    'auranus': (19.189 * ONE_AU, [0, 1, 0, 0]),
    'Mneptune': (1.02e26, [1, 0, 0, 0]),
    'Rneptune': (2.4622e7, [0, 1, 0, 0]),
    'aneptune': (30.07 * ONE_AU, [0, 1, 0, 0]),

    'c': (2.9979e8, [0, 1, -1, 0]),
    'G': (6.674e-11, [-1, 3, -2, 0]),
    'min': (60, [0, 0, 1, 0]),
    'hr': (3600, [0, 0, 1, 0]),
    'day': (86400, [0, 0, 1, 0]),
    'yr': (86400 * 365.24, [0, 0, 1, 0]),

    'pc': (3.0856e16, [0, 1, 0, 0]),
    'ly': (9.461e15, [0, 1, 0, 0]),

    'J': (1, [1, 2, -2, 0]),
    'erg': (1e-7, [1, 2, -2, 0]),
    'W': (1, [1, 2, -3, 0]),
    'Lsun': (3.83e26, [1, 2, -3, 0]),
    'Tsun': (5778, [0, 0, 0, 1]),
    'mp': (1.673e-27, [1, 0, 0, 0]),

    'pi': (np.pi, UNITLESS.copy()),
    'e': (np.e, UNITLESS.copy()),

    'K': (1, [0, 0, 0, 1]),
    'kB': (1.381e-23, [1, 2, -2, -1]),
    'sB': (5.67e-8, [1, 0, -3, -4]),
    'atm': (101325, [1, -1, -2, 0]),
    'Pa': (1, [1, -1, -2, 0]),

    'h': (6.626e-34, [1, 2, -1, 0]),
    'hbar': (1.054e-34, [1, 2, -1, 0]),
}

HIST_FN = '%s/.calchist' % os.environ['HOME']
HIST_LEN = 10000

UNIT_NAMES = ['kg', 'm', 's', 'K']
class Quant(object):
    '''
    units = (mass, length, time) powers (kg, m, s)
    '''
    def __init__(self, val, units, log=False):
        super(Quant, self).__init__()
        self.log = log
        self.val = val
        self.units = units
    def __str__(self):
        ret = ''
        if self.log:
            basepow = int(np.floor(self.val))
            ret += '{0:.6f}e{1:+d} '.format(10**(self.val - basepow), basepow)
        else:
            if abs(np.log10(self.val)) < 4:
                ret += '%f ' % self.val
            else:
                ret += '%e ' % self.val
        for u, name in zip(self.units, UNIT_NAMES):
            if u == 1:
                ret += '%s.' % name
            elif u > 1:
                ret += '%s^%.3f.' % (name, u)
        ret = ret.strip('.')
        ret += '\\'
        for u, name in zip(self.units, UNIT_NAMES):
            if u == -1:
                ret += '%s.' % name
            elif u < -1:
                ret += '%s^%.3f.' % (name, -u)
        return ret.strip('.\\')

    def __add__(self, q1):
        for u1, u2 in zip(self.units, q1.units):
            if u1 != u2:
                raise ValueError('Incompatible units: [%s, %s]' % (self, q1))
        if self.log:
            raise ValueError('Cannot add with log')
        else:
            newval = self.val + q1.val
        return Quant(newval, self.units, self.log)
    def __sub__(self, q1):
        for u1, u2 in zip(self.units, q1.units):
            if u1 != u2:
                raise ValueError('Incompatible units: [%s, %s]' % (self, q1))
        if self.log:
            raise ValueError('Cannot sub with log')
        else:
            newval = self.val - q1.val
        return Quant(newval, self.units, self.log)
    def __mul__(self, q1):
        if self.log:
            newval = self.val + q1.val
        else:
            newval = self.val * q1.val
        return Quant(newval,
                     [u1 + u2 for u1, u2 in zip(self.units, q1.units)],
                     self.log)
    def __truediv__(self, q1):
        if self.log:
            newval = self.val - q1.val
        else:
            newval = self.val / q1.val
        return Quant(newval,
                     [u1 - u2 for u1, u2 in zip(self.units, q1.units)],
                     self.log)
    def __pow__(self, n):
        if n.units != UNITLESS:
            raise ValueError('Power with units: (`%s` ^ `%s`)' % (self, n))
        if self.log:
            nval = 10**(n.val)
            newval = self.val * nval
        else:
            nval = n.val
            newval = self.val ** nval
        return Quant(newval, [u1 * nval for u1 in self.units],
                     self.log)
    def __eq__(self, v):
        self_val = self.val
        v_val = v.val
        if not self.log:
            self_val = np.log10(self_val)
        if not v.log:
            v_val = np.log10(v_val)
        if self_val == 0 and v_val == 0:
            return True
        if abs(self_val - v_val) / self_val > 1e-6:
            return False
        for u1, u2 in zip(self.units, v.units):
            if (u1 - u2) > 1e-3:
                return False
        return True

# generate a Quant from a str
def from_str(expr, prev_res=None, log=False):
    expr_split = expr.split(' ')
    if len(expr_split) == 1:
        if expr == '!!':
            return prev_res
        elif expr in UNITS_DICT:
            val, units = UNITS_DICT[expr]
            if log:
                val = np.log10(val)
            return Quant(val, units, log)
        baseval = float(expr)
        if log:
            baseval = np.log10(baseval)
        return Quant(baseval, UNITLESS.copy(), log)
    elif len(expr_split) != 2:
        raise ValueError('Malformated Quant: `%s`' % expr)

    _quant_val, units = expr_split
    quant_val = float(_quant_val)
    if log:
        quant_val = np.log10(quant_val)
    quant_units = UNITLESS.copy()
    def add_unit(new_units, mult):
        for i, u in enumerate(new_units):
            quant_units[i] += mult * u

    unit_split = units.split('\\')
    if len(unit_split) == 1:
        units_top = unit_split[0]
        units_bot = None
    elif len(unit_split) == 2:
        units_top, units_bot = unit_split
    else:
        raise ValueError('Malformed units: `%s`' % units)

    for unit_group, sign in [(units_top, 1), (units_bot, -1)]:
        if not unit_group:
            continue

        for u in unit_group.split('.'):
            components = u.split('#')
            if len(components) == 1:
                unit = components[0]
                power = 1
            elif len(components) == 2:
                unit = components[0]
                power = float(components[1])
            else:
                raise ValueError('Unparseable unit: `%s`' % u)

            if unit not in UNITS_DICT:
                raise ValueError('Unknown unit: `%s`' % u)
            val, new_units = UNITS_DICT[unit]
            if log:
                val = np.log10(val)
                quant_val += val*(sign * power)
            else:
                quant_val *= val**(sign * power)
            add_unit(new_units, sign * power)
    return Quant(quant_val, quant_units, log)

def split_with_parens(instr, base_seps, lparen='(', rparen=')', space=' '):
    instr = instr.strip()
    seps = list(base_seps) + [space]
    words = []
    ops = []
    prev_idx = 0
    idx = 0
    curr_op = None
    while idx < len(instr):
        c = instr[idx]
        # paren handling
        if c == lparen:
            lcount = 1
            rcount = 0
            idx += 1
            prev_idx = idx
            while rcount < lcount:
                if idx >= len(instr):
                    raise ValueError('Mismatched parens: `%s`' % instr)
                c = instr[idx]
                if c == lparen:
                    lcount += 1
                elif c == rparen:
                    rcount += 1
                idx += 1
            if len(words) and curr_op is None:
                raise ValueError('Missing op: `%s`' % instr)
            if curr_op is not None:
                ops.append(curr_op)
                curr_op = None
            words.append(instr[prev_idx:idx - 1])
            prev_idx = idx
            continue
        # if is not an operator/space
        # edge case: unary negative sign in first idx = part of word
        # fall through in edge case
        if (
                c not in seps
                or (idx == 0 and c == '-')
                or (instr[idx - 1] == 'e' and c == '-')
        ):
            idx += 1
            continue

        # if is operator, append if not empty expr
        if idx - prev_idx > 0 and c in seps:
            if len(words) and curr_op is None:
                raise ValueError('Missing op: `%s`' % instr)
            if curr_op is not None:
                ops.append(curr_op)
                curr_op = None
            words.append(instr[prev_idx:idx])

        # update curr_op if exists
        if c != ' ':
            if curr_op is None:
                curr_op = c
            else:
                raise ValueError('Consecutive operators: `%s` (%s, %s)'
                                 % (instr, curr_op, c))

        prev_idx = idx + 1
        idx += 1
    idx = len(instr)
    if idx - prev_idx > 0:
        words.append(instr[prev_idx:idx])
    if curr_op is not None:
        ops.append(curr_op)
    return words, ops

operators = {
    '+': lambda x, y: x + y,
    '-': lambda x, y: x - y,
    '*': lambda x, y: x * y,
    '/': lambda x, y: x / y,
    '^': lambda x, y: x ** y,
}
operator_tiers = [
    ['^'],
    ['/', '*'],
    ['+', '-'],
]
def eval_expr(expr, prev_res=None, log=False):
    pieces, ops = split_with_parens(expr, operators.keys())
    # base case
    if len(ops) == 0:
        return from_str(expr, prev_res=prev_res, log=log)

    # recursive case, use order of operations by doing 2 passes
    pieces1 = [eval_expr(p, prev_res=prev_res, log=log) for p in pieces]

    for curr_operators in operator_tiers:
        pieces2 = []
        ops2 = []
        curr_res = pieces1[0]
        for idx, op in enumerate(ops):
            if op not in curr_operators:
                ops2.append(op)
                pieces2.append(curr_res)
                curr_res = pieces1[idx + 1]
            else:
                curr_res = operators[op](curr_res, pieces1[idx + 1])
        pieces2.append(curr_res)

        pieces1 = pieces2
        ops = ops2
    return curr_res

if __name__ == '__main__':
    open(HIST_FN, 'a').close()
    try:
        readline.read_history_file(HIST_FN)
    except OSError:
        print('Error reading history file; maybe gnureadline?')
        raise
    readline.set_history_length(HIST_LEN)
    if len(sys.argv) > 1:
        for expr in sys.argv[1: ]:
            readline.add_history(expr)
            print('>>>', expr)
            try:
                print(eval_expr(expr))
            except ValueError as e:
                print(e)
    else:
        prev_res = None
        prev_log = False
        while True:
            try:
                in_str = input('>>> ')
                res = eval_expr(in_str, prev_res=prev_res)
                if np.isinf(res.val):
                    raise OverflowError('ack')
                print(res)
                res2 = eval_expr(in_str, prev_res=prev_res, log=True)
                if res != res2:
                    raise ValueError('Logcheck error: %s != %s' % (res, res2))
                prev_res = res
            except OverflowError as e:
                print('Overflow, retrying with log')
                try:
                    res = eval_expr(in_str, prev_res=prev_res, log=True)
                except OverflowError as e:
                    print('Retry failed')
                print(res)
                prev_res = res
            except ValueError as e:
                print(e)
                continue
            except (EOFError, KeyboardInterrupt):
                break
            except Exception as e:
                print(e)
                print('whoops')
                continue
        print('\nBye!')
        readline.write_history_file(HIST_FN)
