#! /bin/zsh
. ~/.shell_envs
while true; do
    #------------------------------------------------------IF ONLINE----------------------------------------------------------------
    if [[ "$(ip link | grep 'enp.s0' | grep ' UP ')" != "" || "$(iw dev $WIFI link 2> /dev/null | grep "Connected")" != "" ]]; then

        #-----------------------------------------------------------WEATHER------------------------------------------------------------
        curl "https://api.open-meteo.com/v1/forecast?latitude=43.662104&longitude=-79.3891657&daily=temperature_2m_max,temperature_2m_min&current=temperature_2m,weather_code&timezone=America%2FNew_York&forecast_days=1" > /tmp/weatherGrep 2> /dev/null
        gawk 'match($0, /current":.*temperature_2m":(.*),"weather_code":([0-9]*)},"daily_units.*temperature_2m_max":\[([\.0-9]*)\],"temperature_2m_min":\[([\.0-9]*)\]/, a) {print a[1] "(" a[2] ")/" a[3] "/" a[4]}' < /tmp/weatherGrep > /tmp/weather

    #-------------------------------------------------------------ELSE WE'RE DISCONNECTED-------------------------------------------------
    else
        # toggles weather setting already
        rm -f /tmp/weather
    fi

    echo $(date) $(cat /proc/acpi/button/lid/LID0/state) >> /tmp/lidstate
    if [[ ! $(cat /proc/acpi/button/lid/LID0/state) =~ 'open' ]]; then
        echo "\tresuspending..." $(date) >> /tmp/lidstate
        sudo systemctl suspend
    fi

    # repeat every 1m
    sleep 1m
done &

sep='|'
refresh_interval=1 # cpu usage is averaged over 2 such intervals

DP1_val='disconnected'
HDMI1_val='disconnected'
DOUBLE_val='disconnected'

while true; do
    startTime=$(date +%s%N) # sleep (1s - execution time)
    #--------------------------------------------------------TOGGLE SCREEN WHEN CONNECTED----------------------------------------

    # different machines have different names

    # check for existence of various inputs to check whether macbook has
    # discrete card / display ports are enabled
    if [[ "$(hostnamectl hostname)" == ArchTest ]]; then
        xrandr --output HDMI1 --auto --left-of eDP1
    else if [[ "$(hostnamectl hostname)" =~ exo15c ]]; then
        xrandr --output HDMI-1 --auto --left-of VGA-1 --output VGA-1 --auto --rotate left
    else if [[ "$(hostnamectl hostname)" == YuboDesktop ]]; then
        xrandr --output HDMI-1 --auto --right-of DP-1 --rotate right
    else if [[ "$(hostnamectl hostname)" == YuboAcer ]]; then
        if [[ $(cat /sys/class/drm/card1-HDMI-A-1/status) == 'connected' ]]; then
            if [[ $(cat /sys/class/drm/card1-HDMI-A-1/status) != $HDMI1_val ]]; then
                read HDMI1_val < /sys/class/drm/card1-HDMI-A-1/status
                xrandr --output HDMI-1 --mode 2560x1440 --left-of eDP-1
            fi
        else
            if [[ $(cat /sys/class/drm/card1-HDMI-A-1/status) != $HDMI1_val ]]; then
                read HDMI1_val < /sys/class/drm/card1-HDMI-A-1/status
                xrandr --auto
            fi
        fi
    fi; fi; fi; fi
    dwm_rebg

    #--------------------------------------------------------CALCULATE CPU USAGE----------------------------------------
    cpustat=`cat /proc/stat | head -n 1`
    prevused=${prevused:-0}
    previdle=${previdle:-0}
    prev2used=${prev2used:-0}
    prev2idle=${previdle:-0}
    used=${used:-0}
    idle=${idle:-0}
    read _name user nice system incidle _y <<< $cpustat

    (( used = $user + $nice + $system ))
    (( idle = $incidle ))

    # -0.1 so that never 100%, doesn't shift digits lol
    usage=$(printf '%04.1f' $(( 100.0 * ($used - $prev2used) / (($used - $prev2used) + ($idle - $prev2idle)) - 0.1 )))
    prev2used=$prevused
    prev2idle=$previdle
    prevused=$used
    previdle=$idle

    #---------------------------------------------------------- TEMPERATURE ----------------------------------------------------------
    cpumhz=$(cat /tmp/cpumhz | tail -n 1 | cut -c1-4)
    temp=""
    if [[ -a $temp_file ]]; then
        currtemp=$(printf "%02d" $(( $(cat $temp_file) / 1000 )))
        temp="(${cpumhz};${currtemp})"
    else
        temp="(${cpumhz})"
    fi

    #-------------------------------------------------------MEMSTATS--------------------------------------------
    total=$(cat /proc/meminfo | sed -nE 's/MemTotal:\s+(.*) kB/\1/p')
    free=$(cat /proc/meminfo | sed -nE 's/MemAvailable:\s+(.*) kB/\1/p')
    (( mem = 100 * ($total - $free) / $total ))

    #------------------------------------ PING ----------------------------------------
    pingMS=$(ping 8.8.8.8 -c 1 -W 0.7 2> /dev/null | sed -nE 's/.*time=([^ ]+) ms/\1/p')
    if [[ -n ${pingMS} ]]; then
        pingstat="$(printf '%05.1f' ${pingMS})"
    else
        pingstat="(!!)"
    fi

    #-------------------------------------------------------BATTSTATS--------------------------------------------
    _battdir=/sys/class/power_supply/BAT0
    if [[ -e $_battdir/status ]]; then
        read _battstat < $_battdir/status
        battstat=${_battstat:0:1}
        battperc=$(printf '%d' $(( 100.0 * $(cat $_battdir/${_battname}_now)/$(cat $_battdir/${_battname}_full) )))
        # display discharge time on battery, else battery health
        # assume actually on battery power if discharging & battperc < 95
        # (sensor sometimes declares discharging when nearly full)
        if [[ $battstat = 'D' ]] && (( $battperc < 95 )); then
            battdisplay="$(acpi -b | awk '{print $5}' | head -n 1)"
        else
            battdisplay=$(printf '%.1f' $(( 100.0 * $(cat $_battdir/${_battname}_full)/$(cat $_battdir/${_battname}_full_design) )))
        fi
        battAll="${sep}$battperc$battstat($battdisplay)"
    fi

    #---------------------------------------------------------- SIGNAL STRENGTH QUALITY/LEVEL -----------------------------------------
    IWDEVLINK=$(iw dev $WIFI link)
    if ! [[ $IWDEVLINK == 'Not connected.' ]]; then
        net="${sep}$(grep signal <<< $IWDEVLINK | awk '{print $2}' | sed 's/\ //g')"
    fi

    #-------------------------------------------------------SET REPLY--------------------------------------------
    REPLY="${usage}${temp}${sep}${mem}${sep}${pingstat}${net}${battAll}"

    if [[ "$(hostnamectl hostname)" =~ BlendArch ]]; then
        read fan_in < /sys/devices/platform/applesmc.768/fan1_output
        read fan_min < /sys/devices/platform/applesmc.768/fan1_min
        read fan_max < /sys/devices/platform/applesmc.768/fan1_max
        (( FAN = ($fan_in - $fan_min)*100/($fan_max - $fan_min) ))
        REPLY="${FAN}${sep}${REPLY}"
    fi

    echo "$REPLY" > /tmp/status
    sleep $((( $refresh_interval - ($(date +%s%N) - $startTime) / 1000000000.0 )))s
done &

while true; do
lscpu -e="MHZ" | sort > /tmp/cpumhz
sleep 1s
done &
