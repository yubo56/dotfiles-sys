# unbinds
unbind p
unbind [ # copy-mode
unbind = # select-buffer
unbind n # next-window
unbind c # new-window
unbind d # detach-client
unbind '$' # rename-window
unbind "'" # select-window (common typo)
unbind '{' # swap-pane -U
unbind '}' # swap-pane -D
unbind q # display-panes
unbind '&' # kill-window
# I don't use arrow keys D:<
unbind Up
unbind Down
unbind Left
unbind Right





# visual vode uses vi keys
set-window-option -g mode-keys vi
# use local shell
set-option -g default-shell ${SHELL}
# no delay on escape
set -s escape-time 0
# automatically renumber windows
set-option -g renumber-windows on
# scrollback
set-option -g history-limit 10000

# make tput colors show up as 256 not 8
set -g default-terminal "screen-256color"
# use current_window_path for new windows
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

# status-line configuration
set -g status-interval 2
set -g status-position top
set -g status-left-length 100 # full status lengths
set -g status-right-length 100

# old statusline, too verbose
# set -g status-left '[ #S:#{session_id}(#{session_windows}) ] '
# set -g status-right '#{pane_current_path} [ #{client_width} x #{client_height} ] %a %m/%d/%Y %H:%M:%S'
set -g status-left '#{pane_current_path} '
set -g status-right '%a %m/%d/%Y %H:%M:%S [#{client_width}x#{client_height}]'

set -g window-status-format '#{?window_zoomed_flag,#[bg=magenta]#[fg=white]#I#[default],#I}:#{?pane_synchronized,#[bg=red]#W#[default],#W}'
set -g window-status-current-format '#{?window_zoomed_flag,#[bg=magenta]#[fg=white]#I#[default],#I}:#{?pane_synchronized,#[bg=red](#W)#[default],(#W)}'




# v to visual, y to yank, p to paste
bind-key v copy-mode
bind-key -Tcopy-mode-vi v send -X begin-selection
bind-key -Tcopy-mode-vi C-v send -X rectangle-toggle
bind-key = setw synchronize-panes

# layout stuff
bind-key H resize-pane -L 10
bind-key L resize-pane -R 10
bind-key J resize-pane -D 10
bind-key K resize-pane -U 10

bind-key t select-layout even-horizontal
bind-key f select-layout tiled
bind-key m select-layout main-vertical

# hjkl pane traversal
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# clear tmux scrollback buffer
bind-key C-l clear-history

# sending panes to windows
bind-key S command-prompt -p \
    "join pane from:" \
    "join-pane -s ':%%'"
bind-key s command-prompt -p \
    "send pane to:" \
    "join-pane -t ':%%'"

# pane movement
bind-key C-n swap-pane -D
bind-key C-p swap-pane -U
bind-key g display-panes
bind-key q confirm-before -p "kill-window #W? (y/n)" kill-window
bind-key u run-shell -b "urxvt -cd '#{pane_current_path}'"

# window/session commands
# also, new-window getting an argument in single quotes means persist, double
# means die when process done
#
# Windows:
#   n - create
#   N - create with name
#   [/] - next/prev windows
#   C-b/C-f - swap windows (like C-n, C-p for panes)
#   [0-9] - navigate
#   ,/< - rename/edit name
# Sessions:
#   c - create with name
#   C - create with name/wd
#   (/) - next/prev sessions
#   ' - switch by name
#   C-q - detach
#   ./> - rename/edit name
bind-key n new-window -c "#{pane_current_path}"
bind-key N command-prompt -p \
    "window name:" \
    "new-window -n '%%' -c \"#{pane_current_path}\""
bind-key [ previous-window
bind-key ] next-window
bind-key C-b swap-window -t -1
bind-key C-f swap-window -t +1

bind-key c command-prompt -p \
    "session name:" \
    "new-session -s '%%' -c \"#{pane_current_path}\""
# default prefix of '~' unless starts with '/'
bind-key C command-prompt -p \
    "session name:","wd:" \
    "new-session -s '%1'|'%2' -c '%2'"
# lists sessions sorted by ID
bind-key "'" new-window -d \
    "tmux command-prompt -p \
        \"[ $( \
            tmux ls -F '#S: #{session_id}(#{session_windows})' |\
            sed 's/\\$//g' | \
            sort -n -k 2 | \
            tr ' ' '$' | \
            tr '\n' ' ')]\" \
        \"switch-client -t '%%'\""
bind-key C-q detach-client

# renaming
bind-key , command-prompt -p "rename-window:" "rename-window '%%'"
bind-key . new-window -d \
    "tmux command-prompt -p \
        \"rename-session:\" \
        \"rename-session '%%'|$(tmux display-message -p '#S' | sed -n -E 's/.*\\|(.*)/\\1/p')\""
bind-key "<" command-prompt -I '#W' "rename-window '%%'"
bind-key ">" new-window -d \
    "tmux command-prompt \
        -I \"$(tmux display-message -p '#S' | sed -n -E 's/(.*)\\|.*/\\1/p')\" \
        \"rename-session '%%'|$(tmux display-message -p '#S' | sed -n -E 's/.*\\|(.*)/\\1/p')\""




# source mac/linux-specific config
if-shell "grep -q darwin <<< \$OSTYPE" "source-file ~/.tmux_mac.conf"
if-shell "grep -q linux-gnu <<< \$OSTYPE" "source-file ~/.tmux_arch.conf"

# re-source tmux conf
bind-key C-r source-file ~/.tmux.conf
