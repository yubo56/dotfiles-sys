git_status () {
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]]
        then
        GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
        if [ "$GIT_BRANCH" = "HEAD" ]
            then
            echo "(%{$fg[red]%}[HEAD]%{$reset_color%}|$(git_files))"
        else
            if [ "$GIT_BRANCH" != "master" ]
                then
                GIT_BRANCH="%{$fg[green]%}$GIT_BRANCH%{$reset_color%}"
            fi
            echo "($GIT_BRANCH|$(git_files)$(git_commits)) "
        fi
    fi
}

# outputs red-, green+ or nothing
git_commits () {
    # if no upstream then no stdout, fail fast
    if [ "$(git rev-parse --abbrev-ref @{u} 2>/dev/null)" != "" ]
        then
        NUM_AHEAD=$(git rev-list @{u}..HEAD --count 2> /dev/null) &&
        NUM_BEHIND=$(git rev-list HEAD..@{u} --count 2> /dev/null) && {
            if (( ! $? && $NUM_AHEAD && $NUM_BEHIND ))
                then
                echo "%{$fg[yellow]%}?%{$reset_color%}"
            else
                # only execute second if first is nonzero
                (( $NUM_AHEAD )) && echo "%{$fg[green]%}+%{$reset_color%}"
                (( $NUM_BEHIND )) && echo "%{$fg[red]%}-%{$reset_color%}"
            fi
        }
    fi
}

# always outputs something
git_files () {
    # -n only print if explicitly print, p prints
    # ^M, ^A, ^D = modified, newly added, deleted
    # ^\ M, ^\?\?, ^\ D = modified, not yet tracked, deleted
    STATUS=$(git status --porcelain 2> /dev/null) && {
        # STATUS reports like 'M  <FN>' or ' M <FN' or even 'MM <FN>', first
        # character is tracked change second is untracked
        NUM_ADDED=$(grep -c '^[^\ \?]' <<< $STATUS) # anything non-space first char
        NUM_TO_ADD=$(grep -c '^.[^\ ]' <<< $STATUS) # anything non-space second char

        # if either is nonzero, short-circuits and doesn't evaluate second statement
        if (( $NUM_ADDED || $NUM_TO_ADD ))
            then
            (( $NUM_ADDED )) || NUM_ADDED=''
            (( $NUM_TO_ADD )) || NUM_TO_ADD=''
            echo "%{$fg[green]%}$NUM_ADDED%{$fg[red]%}$NUM_TO_ADD%{$reset_color%}"
        else
            echo "%{$fg[green]%}.%{$reset_color%}"
        fi
    } || {
        # print red x if cannot execute git status!
        echo "%{$fg[red]%}x%{$reset_color%}"
    }
}

# prints var with brackets if exists
brack_fmt () {
    if [[ -n $1 ]] echo " {%{$fg_bold[white]%}$1%{$reset_color%}}"
}

# autocompletion for tmux sessions
function __tmux-sessions() {
    local expl
    local -a sessions
    sessions=( ${${(f)"$(command tmux list-sessions)"}/:[ $'\t']##/:} )
    _describe -t sessions 'sessions' sessions "$@"
}

# source set up all venvs
function cd() {
    # compatibility with cdr
    if [[ $1 == '--' ]]; then
        builtin cd $2;
    else
        builtin cd $1;
    fi

    root=$(git rev-parse --show-toplevel 2> /dev/null || true)
    # if has a curr_venv and either no root or wrong root, run deactivates
    if [[ -n $_CURR_VENV && ( -z $root || ! ( $_CURR_VENV =~ $root ) ) ]]; then
        # python venv
        if [[ $(command -v deactivate) ]]; then
            deactivate
        fi

        # shvenv
        if [[ $(command -v shdeactivate) ]]; then
            shdeactivate
        fi
    fi

    # if has git root, try to find venvs, and if exists and not activated activate
    # sources the first one `find` finds, which is largely dfs...
    if [[ -n $root ]]; then
        export _CURR_VENV=$root

        # shvenv before venv, since venv changes path
        shvenvroot=$(find $root -maxdepth 1 -iname .shvenv | head -n 1)
        if [[ -f $shvenvroot && ! $(command -v shdeactivate) ]]; then
            source $shvenvroot
        fi

        # python venv
        venvroot=$(find $root -maxdepth 1 -iname venv | head -n 1)
        if [[ -f $venvroot/bin/activate && ! $(command -v deactivate) ]]; then
            source $venvroot/bin/activate
        fi
    fi
}

# rsync commands in git folders, rsync everything *untracked* so that with git
# push/pull synchronizes
rsync_to_git() {
    # to be able to rsync *from* things, need to let rsync do a dry run and
    # parse it out
    # _cd=$(pwd)
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]]; then
        # cd $(git rev-parse --show-toplevel)
        # dry run, list all files that aren't directories (end in /) and not
        # .git
        FILE_LIST=$(rsync -aLPn $1 $2:$(dirs) $3 | 'grep' -v '^.git\|venv\|incremental file list')
        GIT_FILES_LIST=$(git ls-files)

        # too lazy to sort and iterate, just grep
        RSYNC_LIST=' '
        while IFS= read -r f ; do
            if [[ -z $f ]]; then break; fi
            ( 'grep' -w $f <<< $GIT_FILES_LIST > /dev/null ) || RSYNC_LIST="$RSYNC_LIST--include=$f "
        done <<< $FILE_LIST
        CMD_STR="rsync -aLP $1 $2:$(dirs) $3${RSYNC_LIST}--exclude=*"
        echo $CMD_STR
        eval $CMD_STR # no idea why this is needed vs just executing
    fi
    # cd $_cd
}
# mostly same thing, just change where the $(dirs) cmd is, and rsync prepends
# the name of the current directory in remote so account for that in dropping
# .git folder
rsync_from_git() {
    # _cd=$(pwd)
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]]; then
        # cd $(git rev-parse --show-toplevel)
        BASENAME=${PWD##*/} # current directory

        FILE_LIST=$(rsync -aLPn $1:$(dirs)/* $2 $3 | 'grep' -v "^$BASENAME/.git\\|venv\\|incremental file list")
        GIT_FILES_LIST=$(git ls-files)

        RSYNC_LIST=' '
        while IFS= read -r f ; do
            if [[ -z $f ]]; then break; fi
            ( 'grep' -w $f <<< $GIT_FILES_LIST > /dev/null ) || RSYNC_LIST="$RSYNC_LIST--include=$f "
        done <<< $FILE_LIST
        CMD_STR="rsync -aLP $1:$(dirs)/* $2 $3${RSYNC_LIST}--exclude=*"
        echo $CMD_STR
        eval $CMD_STR
    fi
    # cd $_cd
}
alias rt15g='rsync_to_git . exo15c'
alias rf15g='rsync_from_git exo15c .'
alias rt3g='rsync_to_git . exo3'
alias rf3g='rsync_from_git exo3 .'
alias rt4g='rsync_to_git . exo4'
alias rf4g='rsync_from_git exo4 .'

searchpdf() {
    unset FILES
    FILES=$(find ~/* -name MESA -prune -false -o -iname $1.pdf 2> /dev/null)
    if [[ $FILES != '' ]]; then
        if [[ $2 != '--quiet' ]]; then
            echo "Found:\n${FILES}"
        fi
        zathura $(head -n 1 - <<< $FILES)
    else;
        if [[ $2 != '--quiet' ]]; then
            echo "No files found for pattern \"$1.pdf\""
        fi
    fi
}
